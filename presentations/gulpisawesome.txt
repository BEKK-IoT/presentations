
class: center, middle

# Gulp.js a awesome!
Vegard Veiset

---

# Introduksjon

Hva er gulp?

* byggesystem for javascript
* Streams
* Javascript
* src, dest, watch, task

Install

```
$ npm install gulp
```

---

# Eksempel

```javascript
var gulp = require('gulp');
```

---

# Eksempel

```javascript
var gulp = require('gulp');

gulp.task('copy', function() {
  gulp.src('./folder/*.js')
    .pipe(gulp.dest('./public/'));
});
```

---


# Eksempel

```javascript
var gulp = require('gulp');

gulp.task('copy', function() {
  gulp.src('./folder/*.js')
    .pipe(gulp.dest('./public/'));
});
```

```
$ gulp copy
```

---


# Eksempel

```javascript
var gulp = require('gulp');

gulp.task('copy', function() {
  gulp.src('./folder/*.js')
    .pipe(gulp.dest('./public/'));
});
```

---

# Eksempel

```javascript
var gulp = require('gulp');

gulp.task('copy', function() {
  gulp.src('./folder/*.js')
    .pipe(gulp.dest('./public/'));
});

gulp.task('watch', function () {
  gulp.watch(['./folder/*.js'], ['copy']);
});
```

---

# Eksempel

```javascript
var gulp = require('gulp');

gulp.task('copy', function() {
  gulp.src('./folder/*.js')
    .pipe(gulp.dest('./public/'));
});

gulp.task('watch', function () {
  gulp.watch(['./folder/*.js'], ['copy']);
});
```

```
$ gulp watch
```

---

# Alternativer

Andre byggesystem:

* npm
* Grunt.js


---

# Alternativer

Andre byggesystem:

* npm
* Grunt.js

```javascript
{
  "scripts": {
    "copy" : "cp folder/*.js public/"
  }
}
```


---

# Alternativer

Andre byggesystem:

* npm
* Grunt.js

```javascript
grunt.initConfig({
  copy: {
    main: {
      files: [
        {
          expand: true,
          src: ['folder/*.js'],
          dest: 'public/',
          filter: 'isFile'
        },
      ],
    },
  },
});
grunt.registerTask('copy', ['copy']);
```


---

# Live reload

```javascript
gulp.task('connect', function() {
  connect.server({
    root: 'app',
    livereload: true
  });
});
```

---

# Live reload

```javascript
gulp.task('connect', function() {
  connect.server({
    root: 'app',
    livereload: true
  });
});

gulp.task('javascript', function() {
  gulp.src('./app/app.js')
    .pipe(connect.reload());
});
```

---

# Live reload backend

```javascript
gulp.task('backend', function() {
  express.run(['src/backend.js']);

  gulp.watch(['src/**/*.js'], function() {
    express.stop();
    express.run(['src/backend.js']);
  });
})
```


---

# Streams (queue)

```javascript
streamqueue = require('streamqueue');

function app() { 
  return gulp.src(config.SRC.JS).pipe(bable()); 
}
function lib() { 
  return gulp.src(config.SRC.LIB); 
}

function build() {
  return streamqueue({objectMode: true}, lib(), app())
          .pipe(concat('myapp.js'));   
}

function buildProd() {
  // lib().pipe(uglify())
}

```

---

# Splitte opp prosjektet

```
gulpfile.js
gulp/javascript.js
gulp/styling.js
gulp/tools.js
```

---

# Splitte opp prosjektet

```
gulpfile.js
gulp/javascript.js
gulp/styling.js
gulp/tools.js
```


```javascript
var styling = require('./gulp/styling');

gulp.task('css', function() {
  styling.css(); 
})
```
---



---

# Do all the things!

```javascript
gulp.task('build', function() {
    return browserify({
        entries: './js/app.jsx', extensions: ['.jsx']
    })
    .transform(reactify)
    .transform(babelify)
    .bundle()
    .pipe(source('bundle.js'))
    .pipe(magic())
    .pipe(gulp.dest('dist'));
});
```

---


# Demo
